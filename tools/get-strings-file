#!/usr/bin/env python3

import argparse
import csv
from enum import IntEnum
import io
from itertools import permutations
import os
import re
import requests
import subprocess
import sys

QUESTS_PATH = os.path.join('eosclubhouse', 'quests')
CHARACTERS_PATH = os.path.join('data', 'characters')
CSV_PATH = os.path.join('data', 'quests_strings')
CSV_ALTERNATIVE_PATH = os.path.expanduser('~/.var/app/com.endlessm.Clubhouse' +
                                          '/data/quests/quests_strings')

URL_TEMPLATE = ('https://docs.google.com/spreadsheets/d/{key}/' +
                'gviz/tq?tqx=out:csv&sheet={sheet}&range={range}')
URL_PARAMS = {
    'key': '162yiw_kW3lgLEIUwBq3PgiZxWTtcVBUHqpZKUXtF8qY',
    'range': 'A:F'
}

ALL_SHEETS = ['Episode1', 'Episode2', 'Episode3', 'Episode4', 'Hack2']

quest_codes = None
character_animations = None


# Spreadsheet columns:
class Columns(IntEnum):
    MESSAGE_ID = 0
    TEXT = 1
    SPEAKER = 2
    ANIMATION = 3
    SFX = 4
    BG = 5


def get_quest_codes():
    global quest_codes
    if quest_codes is not None:
        return quest_codes

    quest_codes = set(['noquest'])
    for episode in os.listdir(QUESTS_PATH):
        episode_path = os.path.join(QUESTS_PATH, episode)
        if not os.path.isdir(episode_path):
            continue
        for filename in os.listdir(episode_path):
            if filename == '__init__.py' or filename.startswith('questset_'):
                continue
            code, _ext = os.path.splitext(filename)
            quest_codes.add(code)

    quest_codes = list(quest_codes)
    return quest_codes


def get_character_animations():
    global character_animations
    if character_animations is not None:
        return character_animations

    character_animations = {}
    for character in os.listdir(CHARACTERS_PATH):
        character_animations[character] = set()
        moods_path = os.path.join(CHARACTERS_PATH, character, 'moods')
        if not os.path.isdir(moods_path):
            continue
        for filename in os.listdir(moods_path):
            if not filename.endswith('.json'):
                continue
            animation_name, _ext = os.path.splitext(filename)
            character_animations[character].add(animation_name)

    return character_animations


def get_rows_from_sheet(sheet):
    url_params = URL_PARAMS.copy()
    url_params['sheet'] = sheet

    url = URL_TEMPLATE.format(**url_params)
    response = requests.get(url)
    response.raise_for_status()
    trimmed_text = re.sub(r'\n\s+$', '\n', response.text, 0, re.M)
    csv_file = io.StringIO(trimmed_text)
    return list(csv.reader(csv_file))


def _get_rows_for_quest(quest, rows):
    return (r for r in rows if r[Columns.MESSAGE_ID].startswith(quest.upper()))


def _cleanup_and_validate(quest, rows):
    is_valid = True
    for r in rows:
        # Data cleanup:
        r[Columns.MESSAGE_ID] = r[Columns.MESSAGE_ID].upper()
        r[Columns.SPEAKER] = r[Columns.SPEAKER].lower()
        r[Columns.ANIMATION] = r[Columns.ANIMATION].lower()
        r[Columns.SFX] = r[Columns.SFX].lower()
        r[Columns.BG] = r[Columns.BG].lower()
        if not r[Columns.SFX].startswith('quests/'):
            r[Columns.SFX] = ''
        if not r[Columns.BG].startswith('quests/'):
            r[Columns.BG] = ''

        # Data validation:
        def validate_single_paragraph(r):
            nonlocal is_valid
            txt = r[Columns.TEXT]
            if '\n\n' in txt:
                is_valid = False
                print('WARNING! Message "{}" should not have multiple paragraphs.'
                      ''.format(r[Columns.MESSAGE_ID]))

        if quest is not None:
            for template in ['{}_QUESTION', '{}_QUEST_ACCEPT', '{}_QUEST_REJECT']:
                message_id = template.format(quest.upper())
                if r[Columns.MESSAGE_ID] == message_id:
                    validate_single_paragraph(r)

        character_animations = get_character_animations()

        for character in character_animations:
            message_id = 'NOQUEST_{}_NOTHING'.format(character.upper())
            if r[Columns.MESSAGE_ID] == message_id:
                validate_single_paragraph(r)

        for char_a, char_b in permutations(character_animations, 2):
            message_id = 'NOQUEST_{}_{}'.format(char_a.upper(), char_b.upper())
            if r[Columns.MESSAGE_ID] == message_id:
                validate_single_paragraph(r)

        speaker = r[Columns.SPEAKER].lower().strip()
        if speaker not in ('', 'speaker'):
            if speaker not in character_animations:
                is_valid = False
                print('WARNING! Character "{}" is invalid.'
                      ''.format(r[Columns.SPEAKER]))
            else:
                animation = r[Columns.ANIMATION].lower().strip()
                if animation is not '' and animation not in character_animations[speaker]:
                    is_valid = False
                    print('WARNING! Animation "{}" for character "{}" is invalid.'
                          ''.format(r[Columns.ANIMATION], r[Columns.SPEAKER]))
    return is_valid


def _write_csv_file(filename, rows):
    with open(filename, 'w') as out_file:
        writer = csv.writer(out_file)
        for r in rows:
            writer.writerow(r)


def write_quests(quests, rows, use_alternative_path=False):
    success = True
    csv_path = CSV_PATH if not use_alternative_path else CSV_ALTERNATIVE_PATH
    remaining_rows = None
    if quests is None:
        quests = get_quest_codes()
        remaining_rows = {r[0]: r for r in rows}

    os.makedirs(csv_path, exist_ok=True)
    for quest in quests:
        quest_rows = list(_get_rows_for_quest(quest, rows))
        if not quest_rows:
            print('Quest "{}" has no rows to import.'.format(quest))
            continue

        if remaining_rows is not None:
            for r in quest_rows:
                del remaining_rows[r[0]]
        filename = os.path.join(csv_path, quest + '.csv')
        is_valid = _cleanup_and_validate(quest, quest_rows)
        success = success and is_valid
        _write_csv_file(filename, quest_rows)

    if remaining_rows is not None:
        remaining_rows = list(remaining_rows.values())
        remaining_rows.sort()
        filename = os.path.join(csv_path, 'remaining.csv')
        is_valid = _cleanup_and_validate(None, remaining_rows)
        success = success and is_valid
        _write_csv_file(filename, remaining_rows)

    return success


def _build_commit_message(sheets=None, quests=None):
    sheets_string = ', '.join(sheets or ['all'])
    quests_string = ', '.join(quests or ['all'])

    head = 'data: Update quests strings CSV'
    body = 'From sheets: {}.'.format(sheets_string)
    body += '\n\n'
    body += 'Quests requested for import: {}.'.format(quests_string)
    return head + '\n\n' + body


def make_commit(sheets, quests):
    message = _build_commit_message(sheets, quests)

    # Ensure we don't include previously added things in this commit
    subprocess.call(['git', 'reset', 'HEAD'])

    # Add any changes to the CSV file and commit them
    subprocess.call(['git', 'add', os.path.join(CSV_PATH, '*.csv')])
    subprocess.call(['git', 'commit', '--no-verify', '-m', message])


def main(sheets=None, quests=None, commit=False, use_alternative_path=False):
    sheets_to_import = sheets or ALL_SHEETS

    rows = []
    for sheet in sheets_to_import:
        rows.extend(get_rows_from_sheet(sheet))

    success = write_quests(quests, rows, use_alternative_path)
    if not success:
        if commit:
            print('Not commiting because of the errors above.')
        return 1

    if not commit or use_alternative_path:
        return 0

    make_commit(sheets, quests)
    return 0


parser = argparse.ArgumentParser(description='Obtain the strings to be used in quest messages.')
parser.add_argument('--sheets', type=str,
                    metavar='SHEET',
                    nargs='+',
                    help=('Obtain strings from the specified sheets. ' +
                          'If this parameter is not passed, all known sheets will be imported.'))
parser.add_argument('--quests', type=str,
                    metavar='QUEST',
                    nargs='+',
                    help=('Get only the strings for the specified quests. ' +
                          'Strings that are not specific to any quest will only be obtained ' +
                          'if this parameter is not passed.'))
parser.add_argument('--commit', action='store_true',
                    help='Make a commit with the updated strings.')
parser.add_argument('--use-alternative-path', action='store_true',
                    help='Import the strings into the alternative path.')

args = parser.parse_args()
available_quests = get_quest_codes()

if args.quests is not None:
    bad_quests = set(args.quests) - set(available_quests)
    if bad_quests:
        parser.error(('The following quests are not available: {}.\n' +
                      'Available quests: {}').format(bad_quests, available_quests))

return_code = main(**vars(args))
sys.exit(return_code)
